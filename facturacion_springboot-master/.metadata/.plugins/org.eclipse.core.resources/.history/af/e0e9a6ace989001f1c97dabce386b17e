<!DOCTYPE html>
<html xmlns:th="http://wwww.thymeleaf.org"
	xmlns:sec="http://www.thymeleaf.org/extras/spring-security">
	<script src="https://kit.fontawesome.com/a076d05399.js"></script> <!-- Para íconos -->

<head th:replace="layaout/layaout :: head"></head>
<body>
	<header th:replace="layaout/layaout :: header"></header>
	<div class="container">
		<div class="card bg-light m-4">
			<div class="card-header bg-primary text-white" th:text="${titulo}"></div>
			<div class="card-body">
				<table class="table table-striped m-3">
					<thead class="bg-dark text-white">
						<tr>
							<th sec:authorize="hasRole('ROLE_USER')">ID</th>
							<th>Nombre</th>
							<th>Apellido</th>
							<th>Email</th>
							<th sec:authorize="hasRole('ROLE_ADMIN')">Crear Factura</th>
							<th sec:authorize="hasRole('ROLE_ADMIN')">Editar Cliente</th>
							<th sec:authorize="hasRole('ROLE_ADMIN')">Eliminar Cliente</th>
						</tr>
					</thead>
					<tbody>
						<tr th:each="cliente: ${clientes}">
							<td sec:authorize="hasRole('ROLE_USER')"><a class="btn btn-primary btn-xs"
								th:href="@{/ver/} + ${cliente.id}" th:text="${cliente.id}"></a></td>
							<td th:text="${cliente.nombre}"></td>
							<td th:text="${cliente.apellido}"></td>
							<td th:text="${cliente.email}"></td>
							<td sec:authorize="hasRole('ROLE_ADMIN')"><a class="btn btn-success btn-xs"
								th:href="@{'/factura/form/' + ${cliente.id}}"
								th:text="'Crear Factura'"></a></td>
							<td sec:authorize="hasRole('ROLE_ADMIN')"><a class="btn btn-warning btn-xs"
								th:href="@{/form/} + ${cliente.id}" th:text="'Editar Cliente'"></a></td>
							<td sec:authorize="hasRole('ROLE_ADMIN')"><a class="btn btn-danger btn-xs"
								th:href="@{/eliminar/} + ${cliente.id}"
								th:text="'Eliminar Cliente'"></a></td>
						</tr>
					</tbody>
				</table>
				<nav th:replace="paginator-nav :: paginator"></nav>
			</div>
		</div>
	</div>
	<footer th:replace="layaout/layaout :: footer"></footer>
	<!-- Ícono de Chat flotante -->
	<div id="chatIcon" class="chat-icon">
		<i class="fas fa-comment-dots fa-3x" onclick="openChatModal()"></i>
	</div>

	<!-- Modal para el Chat -->
	<div class="modal fade" id="chatModal" tabindex="-1" role="dialog" aria-labelledby="chatModalLabel" aria-hidden="true">
		<div class="modal-dialog" role="document">
			<div class="modal-content">
				<div class="modal-header">
					<h5 class="modal-title" id="chatModalLabel">Chat de Facturación</h5>
					<button type="button" class="close" data-dismiss="modal" aria-label="Close">
						<span aria-hidden="true">&times;</span>
					</button>
				</div>
				<div class="modal-body">
					<!-- Aquí puedes añadir un campo de entrada para las preguntas -->
					<form id="chatForm">
						<div class="form-group">
							<label for="question">Escribe tu pregunta:</label>
							<textarea class="form-control" id="question" rows="3" placeholder="Pregúntame sobre facturación..."></textarea>
						</div>
						<button type="submit" class="btn btn-primary">Enviar</button>
					</form>
					<!-- Área de respuesta del chatbot -->
					<div id="chatResponse" class="mt-3">
						<!-- Las respuestas del chatbot aparecerán aquí -->
					</div>
				</div>
			</div>
		</div>
	</div>

	<!-- Scripts de Bootstrap y JQuery -->
	<script src="https://code.jquery.com/jquery-3.5.1.slim.min.js"></script>
	<script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.5.2/dist/umd/popper.min.js"></script>
	<script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>

	<!-- Estilos personalizados -->
	<style>
		/* Estilos para el ícono de chat flotante */
		.chat-icon {
			position: fixed;
			bottom: 20px;
			right: 20px;
			cursor: pointer;
			color: #007bff;
			z-index: 1000;
		}
		.chat-icon:hover {
			color: #0056b3;
		}
	</style>

	<!-- Lógica del Chatbot -->
	<script>
		// Abre el modal del chatbot
				function openChatModal() {
					$('#chatModal').modal('show');
				}

				// Función para hacer la llamada a la API de OpenAI
				async function getBotResponse(message) {
					const response = await fetch('https://api.openai.com/v1/chat/completions', {
						method: 'POST',
						headers: {
							'Authorization': 'Bearer TU_API_KEY_AQUI', // Agrega tu API Key de OpenAI
							'Content-Type': 'application/json'
						},
						body: JSON.stringify({
							model: "gpt-3.5-turbo",
							messages: [{ role: "user", content: message }],
							max_tokens: 150
						})
					});
					const data = await response.json();
					return data.choices[0].message.content;
				}

				// Lógica para manejar el envío de preguntas del chatbot
				document.getElementById('chatForm').addEventListener('submit', async function(e) {
					e.preventDefault();
					const question = document.getElementById('question').value.toLowerCase();
					const responseArea = document.getElementById('chatResponse');

					// Llamada a OpenAI para obtener la respuesta
					const response = await getBotResponse(question);

					// Mostrar la respuesta en el área de respuesta
					responseArea.innerHTML = `<div class="alert alert-info mt-2">${response}</div>`;

					// Limpiar el campo de pregunta
					document.getElementById('question').value = '';
				});
	</script>
	
</body>
</html>